{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\seest\\\\Desktop\\\\projects\\\\react-quiz\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API'; // Componensts\n\nimport QuestionCard from './components/QuestionCard'; // Types\n\nimport { Difficulty } from './API';\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      // Users Answers\n      const answer = e.currentTarget.value;\n    }\n  };\n\n  const nextQuestion = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"REACT QUIZ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start\",\n      onClick: startTrivia,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score\",\n      children: \"Score:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 20\n    }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 19\n    }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n      questionNr: number + 1,\n      totalQuestions: TOTAL_QUESTIONS,\n      question: questions[number].question,\n      answers: questions[number].answers,\n      userAnswer: userAnswers ? userAnswers[number] : undefined,\n      callback: checkAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next\",\n      onClick: nextQuestion,\n      children: \"Next Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"3vxO9CiM0ITniaGpI+eu+AjXM9U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/seest/Desktop/projects/react-quiz/src/App.tsx"],"names":["React","useState","fetchQuizQuestions","QuestionCard","Difficulty","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","newQuestions","EASY","checkAnswer","e","answer","currentTarget","value","nextQuestion","length","question","answers","undefined"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {fetchQuizQuestions} from './API';\n\n// Componensts\nimport QuestionCard from './components/QuestionCard';\n// Types\nimport {QuestionState, Difficulty} from './API';\n\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  coorectAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n\n    setQuestions(newQuestions);\n    setScore(0)\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver){\n      // Users Answers\n      const answer = e.currentTarget.value;\n    }\n  }\n\n  const nextQuestion = () => {\n\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>REACT QUIZ</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>\n          Start\n        </button>\n      ) : null}\n      {!gameOver ? <p className=\"score\">Score:</p> : null }\n      {loading && <p>Loading Questions...</p>}\n      {!loading && !gameOver && ( \n      <QuestionCard\n        questionNr={number + 1}\n        totalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number] : undefined}\n        callback={checkAnswer}\n      />\n      )}\n\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n        <button className=\"next\" onClick={nextQuestion}>\n        Next Question\n        </button>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}