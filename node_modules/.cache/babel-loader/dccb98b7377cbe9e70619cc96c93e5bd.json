{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\seest\\\\Desktop\\\\projects\\\\react-quiz\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API'; // Componensts\n\nimport QuestionCard from './components/QuestionCard'; // Types\n\nimport { Difficulty } from './API'; // Styles\n\nimport { GlobalStyle } from './App.styles';\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      // Users Answers\n      const answer = e.currentTarget.value; // Check answer against correct answer\n\n      const correct = questions[number].correct_answer === answer; // Add score if answer is correct\n\n      if (correct) setScore(prev => prev + 1); //Save answer in array for user answers\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move onto next question if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"REACT QUIZ\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start\",\n        onClick: startTrivia,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 22\n      }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading Questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n        questionNr: number + 1,\n        totalQuestions: TOTAL_QUESTIONS,\n        question: questions[number].question,\n        answers: questions[number].answers,\n        userAnswer: userAnswers ? userAnswers[number] : undefined,\n        callback: checkAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next\",\n        onClick: nextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"3vxO9CiM0ITniaGpI+eu+AjXM9U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/seest/Desktop/projects/react-quiz/src/App.tsx"],"names":["React","useState","fetchQuizQuestions","QuestionCard","Difficulty","GlobalStyle","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","newQuestions","EASY","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","nextQuestion","length","answers","undefined"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,kBAAR,QAAiC,OAAjC,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,2BAAzB,C,CACA;;AACA,SAAuBC,UAAvB,QAAwC,OAAxC,C,CACA;;AACA,SAASC,WAAT,QAAqC,cAArC;AASA,MAAMC,eAAe,GAAG,EAAxB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAkB,EAAlB,CAA1C;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAiB,EAAjB,CAA9C;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,IAAD,CAAxC;;AAEA,QAAMmB,WAAW,GAAG,YAAY;AAC9BX,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAU,IAAAA,WAAW,CAAC,KAAD,CAAX;AAEA,UAAME,YAAY,GAAG,MAAMnB,kBAAkB,CAACI,eAAD,EAAkBF,UAAU,CAACkB,IAA7B,CAA7C;AAEAX,IAAAA,YAAY,CAACU,YAAD,CAAZ;AACAJ,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACAF,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAF,IAAAA,SAAS,CAAC,CAAD,CAAT;AACAJ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAXD;;AAaA,QAAMc,WAAW,GAAIC,CAAD,IAA4C;AAC9D,QAAG,CAACN,QAAJ,EAAa;AACX;AACA,YAAMO,MAAM,GAAGD,CAAC,CAACE,aAAF,CAAgBC,KAA/B,CAFW,CAGX;;AACA,YAAMC,OAAO,GAAGlB,SAAS,CAACE,MAAD,CAAT,CAAkBiB,cAAlB,KAAqCJ,MAArD,CAJW,CAKX;;AACA,UAAGG,OAAH,EAAYX,QAAQ,CAACa,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAR,CAND,CAOX;;AACA,YAAMC,YAAY,GAAG;AACnBC,QAAAA,QAAQ,EAAEtB,SAAS,CAACE,MAAD,CAAT,CAAkBoB,QADT;AAEnBP,QAAAA,MAFmB;AAGnBG,QAAAA,OAHmB;AAInBK,QAAAA,aAAa,EAAEvB,SAAS,CAACE,MAAD,CAAT,CAAkBiB;AAJd,OAArB;AAMAd,MAAAA,cAAc,CAAEe,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUC,YAAV,CAAX,CAAd;AACD;AACF,GAjBD;;AAmBA,QAAMG,YAAY,GAAG,MAAM;AACzB;AACA,UAAMA,YAAY,GAAGtB,MAAM,GAAG,CAA9B;;AACA,QAAGsB,YAAY,KAAK5B,eAApB,EAAoC;AAClCa,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAFD,MAGI;AACFN,MAAAA,SAAS,CAACqB,YAAD,CAAT;AACD;AACF,GATD;;AAWA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGhB,QAAQ,IAAIJ,WAAW,CAACqB,MAAZ,KAAuB7B,eAAnC,gBACC;AAAQ,QAAA,SAAS,EAAC,OAAlB;AAA0B,QAAA,OAAO,EAAEc,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,GAIG,IANN,EAOG,CAACF,QAAD,gBAAY;AAAG,QAAA,SAAS,EAAC,OAAb;AAAA,8BAA6BF,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,cAAZ,GAAsD,IAPzD,EAQGR,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARd,EASG,CAACA,OAAD,IAAY,CAACU,QAAb,iBACD,QAAC,YAAD;AACE,QAAA,UAAU,EAAEN,MAAM,GAAG,CADvB;AAEE,QAAA,cAAc,EAAEN,eAFlB;AAGE,QAAA,QAAQ,EAAEI,SAAS,CAACE,MAAD,CAAT,CAAkBoB,QAH9B;AAIE,QAAA,OAAO,EAAEtB,SAAS,CAACE,MAAD,CAAT,CAAkBwB,OAJ7B;AAKE,QAAA,UAAU,EAAEtB,WAAW,GAAGA,WAAW,CAACF,MAAD,CAAd,GAAyByB,SALlD;AAME,QAAA,QAAQ,EAAEd;AANZ;AAAA;AAAA;AAAA;AAAA,cAVF,EAoBG,CAACL,QAAD,IAAa,CAACV,OAAd,IAAyBM,WAAW,CAACqB,MAAZ,KAAuBvB,MAAM,GAAG,CAAzD,IAA8DA,MAAM,KAAKN,eAAe,GAAG,CAA3F,gBACC;AAAQ,QAAA,SAAS,EAAC,MAAlB;AAAyB,QAAA,OAAO,EAAE4B,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,GAIG,IAxBN;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AA+BD,CAlFD;;GAAM3B,G;;KAAAA,G;AAoFN,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport {fetchQuizQuestions} from './API';\n\n// Componensts\nimport QuestionCard from './components/QuestionCard';\n// Types\nimport {QuestionState, Difficulty} from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n\n    setQuestions(newQuestions);\n    setScore(0)\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver){\n      // Users Answers\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if(correct) setScore(prev => prev + 1);\n      //Save answer in array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    // Move onto next question if not the last question\n    const nextQuestion = number + 1;\n    if(nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true);\n    }\n    else{\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle/>\n      <div className=\"App\">\n        <h1>REACT QUIZ</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null }\n        {loading && <p>Loading Questions...</p>}\n        {!loading && !gameOver && ( \n        <QuestionCard\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n        )}\n\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n          Next Question\n          </button>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}